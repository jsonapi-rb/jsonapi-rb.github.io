---
layout: guides
---
# Getting started - Hanami

In order to get a Hanami app rolling with jsonapi-rb, you will usually want to follow those 3 steps:

1. Add `jsonapi-hanami` to your `Gemfile`:

```ruby
# Gemfile

gem 'jsonapi-hanami'
```

2. Declare the `:jsonapi` MIME type (for serialization):

```ruby
# apps/foo/application.rb

module Foo
  class Application < Hanami::Application
    configure do
      # ...
      controller.format jsonapi: 'application/vnd.api+json'
      # ...
    end
  end
end
```

3. Enable the JSON body parser (for deserialization):

```ruby
# apps/foo/application.rb

module Foo
  class Application < Hanami::Application
    configure do
      # ...
      body_parsers :json
      # ...
    end
  end
end
```

4. Optional: Add `apps/foo/resources/` to the `load_path`:

```ruby
# apps/foo/application.rb

module Foo
  class Application < Hanami::Application
    configure do
      # ...
      load_paths << [
        # ...
        'resources'
      ]
      # ...
    end
  end
end
```

5. Extend your actions to use jsonapi-rb:

When using jsonapi-rb with Hanami (via the jsonapi-hanami gem), enabling of
jsonapi-rb features is opt-in, and is done by including
`JSONAPI::Hanami::Action` in your actions.
Rendering is done by setting options directly on the controller action instance.
The primary data is set via the `self.data` setter.

Example:

```ruby
module API::Controllers::Posts
  class Create
    include API::Action
    include JSONAPI::Hanami::Action

    expose :url_helpers

    def call(params)
      # ...
      @url_helpers = routes  # Will be available inside serializable resources.

      self.data = posts
      self.include = [:author, comments: [:author]]
      self.fields  = { users: [:name, :email],
                       posts: [:title, :content] }
    end
  end
end
```

## Examples

<%= partial 'peeks/hanami' %>
