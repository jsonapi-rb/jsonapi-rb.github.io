---
layout: guides
---
# Getting started - Ruby on Rails

Start by adding the `jsonapi-rails` gem to your `Gemfile`:

```ruby
gem 'jsonapi-rails'
```

Then run `bundle install`.

## Defining Serializable and Deserializable resources

Now define your serializable and deserializable resources.

### Serializable resources

```ruby
# app/serializers/post.rb
class SerializablePost < JSONAPI::Serializable::Resource
  type 'posts'

  attributes :title, :content, :tag_ids, :created_at, :updated_at

  belongs_to :author
  has_many :comments
  has_many :users
end
```

### Deserializable resources

```ruby
# app/deserializers/post.rb
class DeserializablePost < JSONAPI::Deserializable::Resource
  attributes :title, :content, :tag_ids
end
```

## Rendering resources from controllers

Once your [serializable resources](/guides/serialization) are defined, building
a JSON API document from your business objects is straightforward. `jsonapi-rails` ties in
to the standard Rails [`render`](https://guides.rubyonrails.org/layouts_and_rendering.html) method.

```ruby
# app/controllers/posts_controller.rb
class PostsController < ActionController::Base
  # ...

  def index
    render jsonapi: Posts.all, include: [:author, comments: [:author]],
           fields: { users: [:name, :email],
                     posts: [:title, :content] }
  end

  # ...
end
```

For a comprehensive list of renderer options, see
[Renderer options](/guides/serialization/rendering.html).

### Rendering relationships

```ruby
class PostsController < ActionController::Base
  # ...

  def comments_relationship
    post = Post.find(id: params[:id])
    render jsonapi: post, relationship: :comments,
           include: [comments: [:author]],
           fields: { users: [:name, :email],
                     posts: [:title, :content] }
  end

  # ...
end
```

### Rendering errors

```ruby
class PostsController < ActionController::Base
  # ...

  def create
    post = Post.new(params[:post])

    if post.save
      render jsonapi: post
    else
      render jsonapi_errors: post.errors
    end
  end

  # ...
end
```

### A full controller example
```ruby
# app/controllers/posts_controller.rb
class PostsController < ActionController::Base
  deserializable_resource :post, only: [:create, :update]

  def index
    render jsonapi: Posts.all,
           include: [:author, comments: [:author]],
           fields: { users: [:name, :email],
                     posts: [:title, :content] }
  end

  def show
    render jsonapi: post, rendering_options
  end

  def create
    post = Post.create(create_params)

    if post.save
      render jsonapi: post, rendering_options.merge(status: :created)
    else
      render jsonapi_errors: post.errors
    end
  end

  def update
    post = Post.find(params[:id])
    post.assign_attributes(update_params)

    if post.save
      render jsonapi: post, rendering_options
    else
      render jsonapi_errors: post.errors
    end
  end

  def destroy
    post = Post.find(params[:id])

    if post.destroy
      head :no_content
    else
      head :conflict
    end
  end

  private

  def create_params
    params.require(:post).permit(:title, :content, :tag_ids)
  end

  def update_params
    params.require(:post).permit(:title, :content, :tag_ids)
  end

  def rendering_options
    {
      include: [:author, comments: [:author]],
      fields: { users: [:name, :email] }
    }
  end
end
```

## Serializable Class Lookup

By default, for an instance of `Post`, the corresponding serializable resource class
will be guessed as `SerializablePost`. But for situations where your classes might fall outside of this mapping, you can specify custom behavior.


Example:

```ruby
class Post < ApplicationRecord
end

class Posts::Publish < Post
  # publishing-only related logic
end
```

`jsonapi-rb` maintains a hash that stores a list of class names as keys, and what serializable resource to use for that class as the corresponding values. You give it a class name, and it tells you what class to use to serialize it.

To render your `Posts::Publish` object using `SerializablePost`, you'll configure this hash to be:

```ruby
{ 'Posts::Publish': SerializablePost }
```

You can set this to apply at different levels of impact across your application.

### Set this option inside your controller action

```ruby
render jsonapi: @post, class: { 'Posts::Publish': SerializablePost }
```

### Set this option across an entire controller

```ruby
class PostsController < ApplicationController
  def jsonapi_class
    super.merge(
      'Posts::Publish': SerializablePost
    )
  end
end
```

### Set this option across your entire application

```ruby
class ApplicationController < ActionController::API
  def jsonapi_class
    super.merge(
      'Posts::Publish': SerializablePost
    )
  end
end
```

## Configuration

### Application-wide settings

You can customize default behaviors in an initializer (`$ rails generate jsonapi:initializer`).

### Controller-wide settings

It is also possible to override application-wide settings at controller level. Simply define
one of the available hooks:
`jsonapi_class`, `jsonapi_errors_class`,`jsonapi_object`, `jsonapi_include`,
`jsonapi_fields`, `jsonapi_expose`, `jsonapi_pagination`.

### Action-wide settings

It is always possible to override the application/controller-wide settings at action level
by providing the relevant [renderer options](/guides/serialization/rendering.html).

### Pagination

TODO
